<?xml version="1.0"?>
<launch>
	
	  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="assignment_world" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>
  
  <!-- URDF file for the mobile manipulator -->
  <param name="robot_description" textfile="$(find assignment2)/urdf/mobile_manipulator.urdf" />

  <!-- Spawn the robot model -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -x -6 -y 11 -z 1 -model mobile_manipulator" />

  
  <!-- Load robotic arm controller and parameters -->
  <rosparam command="load" file="$(find assignment2)/config/arm_control.yaml" />
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>
  
  <!-- Load wheeled base controller and parameters --> 
  <rosparam command="load" file="$(find assignment2)/config/joint_state_controller.yaml" />
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
  <rosparam command="load" file="$(find assignment2)/config/control.yaml" />
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="robot_base_joint_publisher robot_base_velocity_controller"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>


  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>
	
	
   <node name="marker_server" pkg="assignment2" type="marker_server" />
   <node pkg="aruco_ros" type="marker_publisher" name="marker_publisher" output="screen">
  <remap from="/image" to="/robot/camera1/image_raw" />
</node>

  <!-- Start moveit_rviz -->
  <include file="$(find ass2)/launch/moveit_rviz.launch"/>
                                                                       
  <!-- Start move_group -->
  <include file="$(find ass2)/launch/move_group.launch"/>
 
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find assignment2)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find assignment2)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find assignment2)/config/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/config/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/config/base_local_planner_params.yaml" command="load"/>
    <rosparam file="$(find assignment2)/config/move_base_params.yaml" command="load"/>
  </node>
  <arg name="pgm_file" default="$(find assignment2)/maps/12.yaml"/>
  <arg name="yaml_file" default="$(find assignment2)/maps/12.pgm"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg pgm_file) $(arg yaml_file)"/>
  
  <param name="use_sim_time" value="true"/>
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">
	  <param name="base_frame" value="link_chassis"/>
      <param name="map_update_interval" value="5.0"/>
      <param name="maxUrange" value="16.0"/>
      <param name="sigma" value="0.05"/>
      <param name="kernelSize" value="1"/>
      <param name="lstep" value="0.05"/>
      <param name="astep" value="0.03"/>
      <param name="iterations" value="3"/>
      <param name="lsigma" value="0.075"/>
      <param name="ogain" value="3.0"/>
      <param name="lskip" value="0"/>
      <param name="srr" value="0.1"/>
      <param name="srt" value="0.1"/>
      <param name="str" value="0.1"/>
      <param name="stt" value="0.1"/>
      <param name="linearUpdate" value="1.0"/>
      <param name="angularUpdate" value="0.2"/>
      <param name="temporalUpdate" value="3.0"/>
      <param name="resampleThreshold" value="0.5"/>
      <param name="particles" value="20"/>
      <param name="xmin" value="-50.0"/>
      <param name="ymin" value="-50.0"/>
      <param name="xmax" value="50.0"/>
      <param name="ymax" value="50.0"/>
      <param name="delta" value="0.05"/>
      <param name="llsamplerange" value="0.01"/>
      <param name="llsamplestep" value="0.01"/>
      <param name="lasamplerange" value="0.005"/>
      <param name="lasamplestep" value="0.005"/>
      <param name="transform_publish_period" value="0.0005"/>
    </node>
    <!-- Start the reading_laser node -->
  <node name="reading_laser" pkg="assignment2" type="wall_follow.py"/>

  <!-- Start the go_to_point node -->
  <node name="go_to_point" pkg="assignment2" type="nav.py"/>

  <!-- Start the bug0 node -->
  <node name="bug0" pkg="assignment2" type="bug_m.py"/>
</launch>
